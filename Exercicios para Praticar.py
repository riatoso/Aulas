# -*- coding: utf-8 -*-
"""Projeto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nh1ebs5ctdCi-e_-6R24vUrYxvOWCReH

# LISTA DE EXERCICIOS
"""

from random import randint
### ITEMGETTER ORDENA DICIONARIOS (0 -> KEYS , 1 -> VALUES)
from operator import itemgetter
### FIM
def megasena():
  listasorteio = []
  listadic = {}
  x = 0
  while len(listasorteio) < 6:
    sorteio = randint(1,60)
    if sorteio not in listasorteio:
      x = x + 1
      listasorteio.append(sorteio)
      listadic.update({x:sorteio})
    else:
      x = x + 1
      continue 
  listasorteio = sorted(listasorteio)
  
  ###  ORDENAÇÃO POR VALUES
  listadicnormal = sorted(listadic.items(), key=itemgetter(1))
  ### FIM

  ### COM FINAL REVERSE = TRUE - VAI DECRESCENTE
  listadicrev = sorted(listadic.items(), key=itemgetter(0), reverse=True)
  ### FIM

  return listasorteio, listadicnormal, listadicrev
print(megasena())

"""# NOVA LISTA DE EXERCERCICIOS"""

import json
import pprint
import requests
from pprint import pprint
def Previsao():
  apikey = "JHEomAuQNRdCGxLH782tOjVB2vHLVRsg"
  linke = requests.get("http://dataservice.accuweather.com/forecasts/v1/daily/1day/36343?apikey=JHEomAuQNRdCGxLH782tOjVB2vHLVRsg&metric=true")
  leitura = linke.text
  js = json.loads(leitura)
  print(pprint(js))

Previsao()

"""# Faça um programa que use a função valorPagamento para determinar o valor a ser pago por uma prestação de uma conta. 
#O programa deverá solicitar ao usuário o valor da prestação e o número de dias em atraso e passar estes valores para a função 
#valorPagamento, que calculará o valor a ser pago e devolverá este valor ao programa que a chamou. O programa deverá então exibir
#o valor a ser pago na tela. Após a execução o programa deverá voltar a pedir outro valor de prestação e assim continuar até que seja 
#informado um valor igual a zero para a prestação. Neste momento o programa deverá ser encerrado, exibindo o relatório do dia, que conterá
#a quantidade e o valor total de prestações pagas no dia. O cálculo do valor a ser pago é feito da seguinte forma. Para pagamentos sem 
#atraso, cobrar o valor da parcela mais 0,1% de juros por dia de atraso.estação. Quando houver atraso, cobrar 3% de multa, mais 0,1% de juros por 
#dia de atraso.
"""

from datetime import datetime
def Pagamento():
  while True:
    valor = input("Digite o valor da prestação RS: ")
    try:
      valor = float(valor)
      break
    except:
      print("Valor da prestação esta incorreto..")
    
  return valor

Pagamento()

"""# DADO UM NUMERO POSITIVO  , VERIFIQUE SE É PRIMO OU NAO"""

def primo():
  num = input("Digite um numero para ver se primo: ")
  x = 0
  try:
    num = int(num)
  except:
    print("Digite um numero inteiro...")
  for i in range(1,100):
    if num % i == 0:
      x += 1
    else:
      continue
  if x >= 3:
    print("Numero não é primo...")
    print(x)
  else:
    print("Numero é primo.")
    print(x)
primo()

"""#Faça um programa para imprimir:
    1
    2   2
    3   3   3
    .....
    n   n   n   n   n   n  ... n
"""

def crian():
  while True:
    numero = input("Digite o numero para iterar: ")
    try:
      numero = int(numero)
      break
    except:
      print("Digite apenas numeros interios...")
  x = 0
  for i in range(numero):
    x = i *str(".%s."%i)
    print(x)

crian()

"""#Faça um algoritmo que imprima os valores no intervalo definido pelo usuário e permita que o mesmo possa definir 3 números que deverão ser ignorados, ou seja, que não serão impressos na tela:"""

def intervalo():
  while True:
    espaco = input("Digite o range a ser escrito, sempre começa do 0 e vai até: ")
    try:
      espaco = int(espaco)
      break
    except:
      print("Digite apenas numeros...")
  while True:
    n1 = input("Digite os numeros a serem ignorados EX: 1,3,4,6,7 - Separados por , :")
    n2 = n1.split(",")
    n3 = []
    for i in n2:
      try:
        i = int(i)
        n3.append(i)
      except:
        print("Ignorando %s"%i+"...")
    break
  print("Numeros a serem impressos: ", end="-")
  for x in range(0,espaco):
    if x in n3:
      print("Ignorado", end="-")
    else:
      print("%i"%x, end="-")
intervalo()

"""#Faça um algoritmo que imprima a frase "estou em looping" e, em seguida, solicite ao usuário digitar uma letra. Caso a letra seja o "q" finalize a aplicação. Do contrário, imprima novamente a mesma frase até que o caractere "q" seja enviado:"""

def looping():
  print("Para não explodir digite a letra certa...Maximo 5 tentativas!")
  x = 1
  while True:
    print("Contagem regressiva... %s"%x)
    letra = input("Digite a letra: ").lower()[0]
    if letra != "q":
      x += 1
      if x == 5:
        print("Voce explodiuuuuuuuuuuuuuuuuuuuuuuu...........")
      else:
        print("Outra tentativa...")
        continue
    else:
      print("Descobriu o codigo parabens.......")
      print("BOMBA DESARMADA.")
    break
looping()

"""#Escreva uma função que tenha definida uma função em seu escopo. Invoque a função aninhada, retorne algum valor, imprima esse valor na tela e finalize a aplicação."""

def funcao1(a):
  def funcao2(b):
    return b
  c = funcao2(30) * a
  return c
print(funcao1(20))

"""#Construa uma função encaixa que dados dois inteiros positivos a e b verifica se b corresponde aos últimos dígitos de a.

Ex.:

a b	 
567890 	 890	=> encaixa

1243	1243	=> encaixa

2457	245 	=> não encaixa

457	2457	=> não encaixa

 
Usando a função do item anterior, faça um programa que lê dois inteiros positivos a e b e verifica se o menor deles é segmento do outro.

Exemplo:
 

a	b	 
567890	678	=> b é segmento de a

1243	2212435	=> a é segmento de b

235	236	=> um não é segmento do outro
"""

def compara():
  while True:
    try:
      a = input("(a)Digite um numero de 0 a 10000: ")
      a = int(a)
      if a < 0 or a > 10000:
        print("Numero fora do range definido.")
        continue
      else:
        break
    except:
      print("Digite apenas numeros...")
      continue
  while True:
    try:
      b = input("(b)Digite outro numero de 0 a 10000: ")
      b = int(b)
      if b < 0 or b > 10000:
        print("Numero fora do range definido.")
        continue
      else:
        break
    except:
      print("Digite apenas numeros...")
  a = str(a)
  b = str(b)
  if a in b:
    print("O numero %s esta contido"%a+" em %s"%b)
  elif b in a:
    print("O numero %s esta contido"%b+" em %s"%a)
  else:
    print("Não esta contido em nada") 

compara()

"""# CRIE UMA CLASSE QUE CALCULE A AREA DO RETANGULO"""

class Funcionario:
    def __init__(self):
      pass

    def pessoa(self):
        lista = []
        nome = input("Digite o nome da pessoa: ")
        while True:
            idade = input("Digite a idade: ")
            try:
                idade = int(idade)
                break
            except:
                print("idade tem que ser numero.")
                continue
        while True:
            altura = input("Digite a altura: ")
            try:
                altura = float(altura)
                break
            except:
                print("Atura tem que ser numeros.")
                continue
        lista.append([nome,idade,altura])
        return lista
x = Funcionario().pessoa()
print(x)

"""# CONCATENAR DUAS LISTAS
# ALTURA X PESO DE DUAS PESSOAS.
# TUDO EM CLASSES
"""

class Listagem:
    def __init__(self, n1, n2, altura , peso):
        self.num1 = n1
        self.num2 = n2
        self.alt = altura
        self.kg = peso
    def soma(self):
        n = self.num1 + self.num2
        return n
    def gordo(self):
        resultado = self.alt * self.kg
        return resultado

x = Listagem([3,5,6],[10,7,8], 45, 67)
print(x.soma())
print(x.gordo())

"""#CLASSE DE MULTIPLICAÇÃO COM INPUT"""

class Contas:
    def __init__(self, n1, n2):
        self.num1 = n1
        self.num2 = n2
    def multiplica(self):
        return (self.num1 * self.num2)

### TRATAMENTO DE DADOS
while True:
  num1 = input("Digite o primeiro numero: ")
  try:
    num1 = int(num1)
    break
  except:
    print("Precisa ser numero: ")
    continue
while True:
  num2 = input("Digite o segundo numero: ")
  try:
    num2 = int(num2)
    break
  except:
    print("Precisa ser numero: ")
    continue

var = Contas(num1,num2).multiplica()
print(var)

"""#Escreva uma função que recebe um inteiro positivo m e devolve 1 se m é primo, 0 em caso contrário."""

class Primo:
  def __init__(self, n1, n2):
    self.num1 = n1
    self.num2 = n2
  def calcula(self):
    primos = []
    nprimos = []
    self.num1 = int(self.num1)
    self.num2 = int(self.num2)
    for i in range(self.num1, self.num2):
      if i%2==0 or i%3==0 or i%5==0:
        nprimos.append(i)
      else:
        primos.append(i)
    return print("Numeros primos são: ",primos,"\n"+"Não primos: ",nprimos)
x = Primo(1,67)
x.calcula()

"""# ***### DE AGORA EM DIANTE TODOS OS CODIGO SERAM EM PYTHON COM CLASSES.***

#Escreva um programa que gere a tabuada das multiplicações de um número inteiron(1n10)recebido do teclado. A saída deverá ser semelhante ao exemplo abaixo:Tabuada de 
#7:1 x 7 =72 x 7 = 143 x 7 = 21
"""

class Tabuada:
  def __init__(self, numero):
    self.numero = numero
  def tabu(self):
    print(10*"-+")
    print("TABUADA".center(20))
    print(10*"-+")
    for i in range(11):
      resultado = int(i) * self.numero
      print(i,"X %i"%self.numero+" = %i"%resultado)

### TRATANDO DADOS
while True:
  num = input("Digite um numero para tabuada: ")
  try:
    num = int(num)
    break
  except:
    print("Tem que ser numero.")
    continue
### FIM DO TRATAMENTO
x = Tabuada(num)
x.tabu()

"""#Escreva um programa que contenha uma função que calcule o fatorial de um número inteiro"""

# coding: utf-8
class Ftr:
  def __init__(self, numero):
    self.numero = numero
  def calcula(self):
    resultado = self.numero
    for i in range((self.numero -1),0,-1):
      resultado = resultado * i
      #print(i)
    return resultado
### TRATAMENTO DE DADOS
while True:
  num = input("Digite um numero para fatorial: ")
  try:
    num = int(num)
    break
  except:
    print("Precisa ser numero...")
    continue
### FIM DO TRATAMENTO

y = Ftr(num)
print("O fatorial de %i"%num+" é: %i"%y.calcula())

"""#Escreva um programa que contenha um procedureque receba um nome como parâmetro e retorne omesmo nome em sentido vertical. Siga o modelo abaixo:Entrada -> NA VERTICAL"""

class Vertical:
    def __init__(self, nome):
      self.nome = nome
    def ordena(self):
      n = self.nome
      for i in n:
        print(i)
x = Vertical("ricardo".upper())
x.ordena()

"""#Receba um vetor e inverta a ordem dos elementos (Sem usar a função reverse)"""

class Reverte:
  def __init__(self, lista):
    self.lista = lista
  def reversao(self):
    rev = self.lista
    rev_inv = rev[::-1]
    return rev_inv
x = Reverte(["Receba","um","vetor","e","inverta","a","ordem","dos","elementos.","Sem","usar","a","função","reverse"])
print(x.reversao())

"""#Escreva um programa que grave dez frases em um arquivo de texto.
#Depois leia o arquivo.txt
"""

class Frase:
  def __init__(self, fr):
    self.fr = fr
  def preenche(self):
    arquivo = open("C:\\i9ti\\frase.txt","a")
    a = self.fr
    arquivo.write(a)
    arquivo.close()
  def ler_frases(self):
    arquivo = open("C:\\i9ti\\frase.txt","r")
    ler = arquivo.readlines()
    print(20*"-+")
    print("Lendo frase: ", end="\n")
    for i in ler:
      print(i, end="")
    print(20*"-+")

### CRIA 10 FRASES NO ARQUIVO DE TEXTO
def preenchido():
  x = int(1)
  while x < 11:
    f = input("Digite a frase numero %i: "%x)
    y = Frase(f+"\n")
    y.preenche()
    x += 1
  else:
    print("Arquivo preenchido com sucesso!")

### LER AS FRASES
def leitura():
  l = Frase("")
  l.ler_frases()